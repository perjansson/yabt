import { PostMessageBus, PostMessageBusSink, PostMessageBusSource } from 'angular2/src/web_workers/shared/post_message_bus';
import { bootstrapWebWorkerCommon } from "angular2/src/web_workers/worker/application_common";
export * from "angular2/src/web_workers/shared/message_bus";
import { Parse5DomAdapter } from 'angular2/src/platform/server/parse5_adapter';
var _postMessage = postMessage;
/**
 * Bootstrapping a Webworker Application
 *
 * You instantiate the application side by calling bootstrapWebworker from your webworker index
 * script.
 * You can call bootstrapWebworker() exactly as you would call bootstrap() in a regular Angular
 * application
 * See the bootstrap() docs for more details.
 */
export function bootstrapWebWorker(appComponentType, componentInjectableProviders = null) {
    Parse5DomAdapter.makeCurrent();
    var sink = new PostMessageBusSink({
        postMessage: (message, transferrables) => { _postMessage(message, transferrables); }
    });
    var source = new PostMessageBusSource();
    var bus = new PostMessageBus(sink, source);
    return bootstrapWebWorkerCommon(appComponentType, bus, componentInjectableProviders);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhbmd1bGFyMi9zcmMvd2ViX3dvcmtlcnMvd29ya2VyL2FwcGxpY2F0aW9uLnRzIl0sIm5hbWVzIjpbImJvb3RzdHJhcFdlYldvcmtlciJdLCJtYXBwaW5ncyI6Ik9BQU8sRUFDTCxjQUFjLEVBQ2Qsa0JBQWtCLEVBQ2xCLG9CQUFvQixFQUNyQixNQUFNLGtEQUFrRDtPQUtsRCxFQUFDLHdCQUF3QixFQUFDLE1BQU0sb0RBQW9EO0FBRTNGLGNBQWMsNkNBQTZDLENBQUM7T0FDckQsRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDZDQUE2QztBQU01RSxJQUFJLFlBQVksR0FBOEIsV0FBVyxDQUFDO0FBRTFEOzs7Ozs7OztHQVFHO0FBQ0gsbUNBQ0ksZ0JBQXNCLEVBQ3RCLDRCQUE0QixHQUFtQyxJQUFJO0lBQ3JFQSxnQkFBZ0JBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBO0lBQy9CQSxJQUFJQSxJQUFJQSxHQUFHQSxJQUFJQSxrQkFBa0JBLENBQUNBO1FBQ2hDQSxXQUFXQSxFQUNQQSxDQUFDQSxPQUFZQSxFQUFFQSxjQUE2QkEsT0FBT0EsWUFBWUEsQ0FBQ0EsT0FBT0EsRUFBRUEsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7S0FDaEdBLENBQUNBLENBQUNBO0lBQ0hBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLG9CQUFvQkEsRUFBRUEsQ0FBQ0E7SUFDeENBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLGNBQWNBLENBQUNBLElBQUlBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO0lBRTNDQSxNQUFNQSxDQUFDQSx3QkFBd0JBLENBQUNBLGdCQUFnQkEsRUFBRUEsR0FBR0EsRUFBRUEsNEJBQTRCQSxDQUFDQSxDQUFDQTtBQUN2RkEsQ0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBQb3N0TWVzc2FnZUJ1cyxcbiAgUG9zdE1lc3NhZ2VCdXNTaW5rLFxuICBQb3N0TWVzc2FnZUJ1c1NvdXJjZVxufSBmcm9tICdhbmd1bGFyMi9zcmMvd2ViX3dvcmtlcnMvc2hhcmVkL3Bvc3RfbWVzc2FnZV9idXMnO1xuaW1wb3J0IHtUeXBlfSBmcm9tIFwiYW5ndWxhcjIvc3JjL2ZhY2FkZS9sYW5nXCI7XG5pbXBvcnQge1Byb3ZpZGVyLCBJbmplY3RhYmxlfSBmcm9tIFwiYW5ndWxhcjIvc3JjL2NvcmUvZGlcIjtcbmltcG9ydCB7TWFwfSBmcm9tICdhbmd1bGFyMi9zcmMvZmFjYWRlL2NvbGxlY3Rpb24nO1xuaW1wb3J0IHtQcm9taXNlfSBmcm9tICdhbmd1bGFyMi9zcmMvZmFjYWRlL2FzeW5jJztcbmltcG9ydCB7Ym9vdHN0cmFwV2ViV29ya2VyQ29tbW9ufSBmcm9tIFwiYW5ndWxhcjIvc3JjL3dlYl93b3JrZXJzL3dvcmtlci9hcHBsaWNhdGlvbl9jb21tb25cIjtcbmltcG9ydCB7Q29tcG9uZW50UmVmfSBmcm9tIFwiYW5ndWxhcjIvc3JjL2NvcmUvbGlua2VyL2R5bmFtaWNfY29tcG9uZW50X2xvYWRlclwiO1xuZXhwb3J0ICogZnJvbSBcImFuZ3VsYXIyL3NyYy93ZWJfd29ya2Vycy9zaGFyZWQvbWVzc2FnZV9idXNcIjtcbmltcG9ydCB7UGFyc2U1RG9tQWRhcHRlcn0gZnJvbSAnYW5ndWxhcjIvc3JjL3BsYXRmb3JtL3NlcnZlci9wYXJzZTVfYWRhcHRlcic7XG5cbi8vIFRPRE8oanRlcGxpdHo2MDIpIHJlbW92ZSB0aGlzIGFuZCBjb21waWxlIHdpdGggbGliLndlYndvcmtlci5kLnRzICgjMzQ5MilcbmludGVyZmFjZSBQb3N0TWVzc2FnZUludGVyZmFjZSB7XG4gIChtZXNzYWdlOiBhbnksIHRyYW5zZmVycmFibGVzPzpbQXJyYXlCdWZmZXJdKTogdm9pZDtcbn1cbnZhciBfcG9zdE1lc3NhZ2U6IFBvc3RNZXNzYWdlSW50ZXJmYWNlID0gPGFueT5wb3N0TWVzc2FnZTtcblxuLyoqXG4gKiBCb290c3RyYXBwaW5nIGEgV2Vid29ya2VyIEFwcGxpY2F0aW9uXG4gKlxuICogWW91IGluc3RhbnRpYXRlIHRoZSBhcHBsaWNhdGlvbiBzaWRlIGJ5IGNhbGxpbmcgYm9vdHN0cmFwV2Vid29ya2VyIGZyb20geW91ciB3ZWJ3b3JrZXIgaW5kZXhcbiAqIHNjcmlwdC5cbiAqIFlvdSBjYW4gY2FsbCBib290c3RyYXBXZWJ3b3JrZXIoKSBleGFjdGx5IGFzIHlvdSB3b3VsZCBjYWxsIGJvb3RzdHJhcCgpIGluIGEgcmVndWxhciBBbmd1bGFyXG4gKiBhcHBsaWNhdGlvblxuICogU2VlIHRoZSBib290c3RyYXAoKSBkb2NzIGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBib290c3RyYXBXZWJXb3JrZXIoXG4gICAgYXBwQ29tcG9uZW50VHlwZTogVHlwZSxcbiAgICBjb21wb25lbnRJbmplY3RhYmxlUHJvdmlkZXJzOiBBcnJheTxUeXBlIHwgUHJvdmlkZXIgfCBhbnlbXT4gPSBudWxsKTogUHJvbWlzZTxDb21wb25lbnRSZWY+IHtcbiAgUGFyc2U1RG9tQWRhcHRlci5tYWtlQ3VycmVudCgpO1xuICB2YXIgc2luayA9IG5ldyBQb3N0TWVzc2FnZUJ1c1Npbmsoe1xuICAgIHBvc3RNZXNzYWdlOlxuICAgICAgICAobWVzc2FnZTogYW55LCB0cmFuc2ZlcnJhYmxlcz86W0FycmF5QnVmZmVyXSkgPT4geyBfcG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXJyYWJsZXMpOyB9XG4gIH0pO1xuICB2YXIgc291cmNlID0gbmV3IFBvc3RNZXNzYWdlQnVzU291cmNlKCk7XG4gIHZhciBidXMgPSBuZXcgUG9zdE1lc3NhZ2VCdXMoc2luaywgc291cmNlKTtcblxuICByZXR1cm4gYm9vdHN0cmFwV2ViV29ya2VyQ29tbW9uKGFwcENvbXBvbmVudFR5cGUsIGJ1cywgY29tcG9uZW50SW5qZWN0YWJsZVByb3ZpZGVycyk7XG59XG4iXX0=